@inject NavigationManager NavigationManager
@inject IAddInventoryItemService AddInventoryItemService
@inject IEditInventoryItemService EditInventoryItemService

<EditForm Model="InventoryPopulated"
          OnValidSubmit="SubmitHandler">

    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="invName">Inventory Name</label>
        <InputText placeholder="Enter Inventory Name"
                   @bind-Value="@InventoryPopulated.InventoryName"
                   id="invName"
                   class="form-control" />
    </div>

    <div class="form-group">
        <label for="invQuantity">Inventory Quantity</label>
        <InputNumber @bind-Value="@InventoryPopulated.Quantity"
                     id="invQuantity"
                     class="form-control" />
    </div>

    <div class="form-group">
        <label for="invPrice">Inventory Price</label>
        <InputNumber @bind-Value="@InventoryPopulated.Price"
                     id="invPrice"
                     class="form-control" />
    </div>

    <br />

    <div class="form-group">
        <button type="submit"
                class="btn btn-primary">Submit</button>
        <button type="button"
                class="btn btn-secondary"
                @onclick="Redirect">Cancel</button>
    </div>
</EditForm>

@code {
    [Parameter]
    public Inventory InventoryPopulated { get; set; } = new();

    [Parameter]
    public string operation { get; set; } = String.Empty;

    private async Task SubmitHandler()
    {
        if (operation.Equals("add"))
            await AddInventoryItemService.ExecuteAsync(InventoryPopulated);
        
        else
            await EditInventoryItemService.ExecuteAsync(InventoryPopulated);

        Redirect();
    }

    private void Redirect()
    {
        NavigationManager.NavigateTo("inventories");
    }
}
